grammar LengthGrammar

  rule term
    additive |  factor | number_group
  end

  rule additive
    (factor operator:('+' | '-') space* term) {
      capture(:factor).value.send(capture(:operator).to_s, capture(:term).value)
    }
  end

  rule factor
    multiplicative | prefix
  end

  rule number_group
    (space* mixed_number space* term space*){
      capture(:mixed_number).value.send("+@", capture(:term).value)
    }
  end

  rule multiplicative
    (prefix operator:('*' | '/' | '%') space* factor) {
      capture(:prefix).value.send(capture(:operator).to_s, capture(:factor).value)
    }
  end

  rule prefix
    prefixed | exponent
  end

  rule prefixed
    (operator:('-' | '+' | '~') space* prefix) {
      s = capture(:operator).to_s
      s += '@' unless s == '~' # Unary + and - require an @.
      capture(:prefix).value.send(s)
    }
  end

  rule exponent
    exponential | primary
  end

  rule exponential
    (primary operator:'**' space* prefix) {
      capture(:primary).value.send(capture(:operator).to_s, capture(:prefix).value)
    }
  end

  rule primary
    group | mixed_number
  end

  rule group
    (lparen term rparen) {
      capture(:term).value
    }
  end

  ## Lexical syntax

  rule mixed_number
    formatted_number | number 
  end

  rule number
    integer | float | rational
  end

  rule float
    (digits '.' digits space*) { to_str.to_f }
  end

  rule integer
    (digits space*) { capture(:digits).to_str.to_i }
  end

  rule rational
    (digits '/' digits space*) { to_str.to_r }
  end

  rule formatted_number
    feet | inches | cm | mm | meter
  end

  rule inches
    (number inch_identifier space*){
      capture(:number).value
    }
  end

  rule feet
    (number foot_identifier space*) {
      capture(:number).value * 12
    }
  end

  rule mm
    (number mm_identifier space*){
      (capture(:number).value.to_r * (3/64)).rationalize
    }
  end

  rule cm
    (number cm_identifier space*){
      (capture(:number).value.to_r * (25/64)).rationalize
    }
  end

  rule meter
    (number meter_identifier space*){
      (capture(:number).value.to_r * (39 + (3/8))).rationalize
    }
  end

  rule cm_identifier
    'cm' | 'centimeters' | 'centimetres'
  end

  rule mm_identifier
    'mm' | 'millimeters' | 'millimetres'
  end

  rule foot_identifier 
    '\'' | 'feet' | 'ft'
  end

  rule inch_identifier 
    '\"' | 'inches' | 'in'
  end

  rule meter_identifier
    'meter' | 'meters' | 'm'
  end

  rule digits
    [0-9]+ ('_' [0-9]+)* # mixed_numbers may contain underscores.
  end

  rule lparen '(' space* end
  rule rparen ')' space* end
  rule space  [ \t\n\r]  end
end